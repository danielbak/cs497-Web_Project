<?php

namespace AppBundle\Controller;
use Symfony\Component\HttpFoundation\Request;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use AppBundle\Entity\Document;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;



use FOS\UserBundle\Event\FilterUserResponseEvent;
use FOS\UserBundle\Event\FormEvent;
use FOS\UserBundle\Event\GetResponseUserEvent;
use FOS\UserBundle\Form\Factory\FactoryInterface;
use FOS\UserBundle\FOSUserEvents;
use FOS\UserBundle\Model\UserInterface;
use FOS\UserBundle\Model\UserManagerInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;


use ONGR\ElasticsearchBundle;
use ONGR\ElasticsearchDSL;
use ONGR\ElasticsearchDSL\Query\MatchAllQuery;
use ONGR\ElasticsearchDSL\Search;
use ONGR\ElasticsearchDSL\Query\FullText\CommonTermsQuery;
use ONGR\ElasticsearchDSL\Query\FullText\SimpleQueryStringQuery;

use Elasticsearch\ClientBuilder;

class MainController extends Controller
{
    /**
     * @Route("/", name="home")
     */
    public function homeAction()
    {
            $user = $this->getUser();
	    return $this->render('index.html.twig', array(
            'user' => $user));
    }


    /**
     * @Method({"GET", "POST"})
     * @Route("/logged", name="logged")
     */
    public function loggedAction(Request $request)
    {

if(isset($_GET['ok']))
{
unlink($_GET['ok']);

}




            //require 'vendor/autoload.php'; //Composer autoload
$hosts = [
	'https://elastic:caLjbhalN2XBCIcIL6SdZyko@29b986c546a2ecd07c6e93f6a9d00091.us-east-1.aws.found.io:9243'
	//'localhost:9200'

];  

  $client = ClientBuilder::create()
			->setHosts($hosts) 
			->build(); //elasticsearch-php client
  
  $matchAll = new MatchAllQuery();
  
  $search = new Search();
  $search->addQuery($matchAll);
  
  $params = [
    'index' => 'job_name',
    'type' => 'doc',
    'body' => $search->toArray(),
  ];
  
  $Allfiles = $client->search($params);

$Queriedfiles = array();

if(isset($_GET['q']) && isset($_GET['commonTermsQuery']) && $_GET['commonTermsQuery'] == "commonTermsQuery")
{

$cutoff_frequency = 0.001;
$low_freq = 2;
$high_freq = 3;


if(isset($_GET['cutoff_frequency']) && empty($_GET['cutoff_frequency']))
$cutoff_frequency = intval($_GET['cutoff_frequency']);

if(isset($_GET['low_freq']) && empty($_GET['low_freq']))
$low_freq = intval($_GET['low_freq']);

if(isset($_GET['high_freq']) && empty($_GET['high_freq']))
$high_freq = intval($_GET['high_freq']);

$commonTermsQuery = new CommonTermsQuery(
    "content",
    $_GET['q'],
    [
        "cutoff_frequency" => $cutoff_frequency,
        "minimum_should_match" => [
          "low_freq" => $low_freq,
          "high_freq" => $high_freq,
        ],
    ]
);

$searchQuery = new Search();
  $searchQuery->addQuery($commonTermsQuery);
  
  $paramsQuery = [
    'index' => 'job_name',
    'type' => 'doc',
    'body' => $searchQuery->toArray(),
  ];

$Queriedfiles = $client->search($paramsQuery);

}



if(isset($_GET['q']) && isset($_GET['simpleQueryStringQuery']) && $_GET['simpleQueryStringQuery'] == "simpleQueryStringQuery")
{

$default_operator = 'and';

if(isset($_GET['default_operator']) && !empty($_GET['default_operator']))
$default_operator = $_GET['default_operator'];


$simpleQueryStringQuery = new SimpleQueryStringQuery(
    $_GET['q'],
    [
        'fields' => ['content'],
        'default_operator' => $default_operator,
    ]
);

$searchQuery = new Search();
$searchQuery->addQuery($simpleQueryStringQuery);
  
  $paramsQuery = [
    'index' => 'job_name',
    'type' => 'doc',
    'body' => $searchQuery->toArray(),
  ];

$Queriedfiles = $client->search($paramsQuery);

}




	    return $this->render('confirmed.html.twig', array('Allfiles' => $Allfiles, 'Queriedfiles' => $Queriedfiles));
    }





   /**
     * @Method({"GET", "POST"})
     * @Route("/logged1", name="logged1")
     */
    public function deleteAction(Request $filePath)
    {


            //require 'vendor/autoload.php'; //Composer autoload
$hosts = [
	'https://elastic:caLjbhalN2XBCIcIL6SdZyko@29b986c546a2ecd07c6e93f6a9d00091.us-east-1.aws.found.io:9243'
	//'localhost:9200'

];  

  $client = ClientBuilder::create()
			->setHosts($hosts) 
			->build(); //elasticsearch-php client
  
  $matchAll = new MatchAllQuery();
  
  $search = new Search();
  $search->addQuery($matchAll);
  
  $params = [
    'index' => 'job_name',
    'type' => 'doc',
    'body' => $search->toArray(),
  ];
  
  $results = $client->search($params);

	    return $this->render('confirmed.html.twig', array('results' => $results));
    }











    /**
     *
     * @Method({"GET", "POST"})
     * @Route("/documents", name="ajax_snippet_image_send")
     */
    public function ajaxSnippetImageSendAction(Request $request)
    {
        $em = $this->container->get("doctrine.orm.default_entity_manager");

        $document = new Document();

        $media = $request->files->get('file');
        
        $document->setFile($media);
        $document->setPath($media->getPathName());
        $document->setName($media->getClientOriginalName());
        $document->upload();
        
        $em->persist($document);
        $em->flush();
        
        
        var_dump($request->files->get('file'));die;
        return new JsonResponse(array('success' => true));

    }
    
}
